# Note, you can't have comments below in a '>' section, that's why here are the comments upfront.
# -hicpp-deprecated-headers: unfortunately, should be restrictable to <>-includes
# -readability-function-cognitive-complexity: goes bogus in gtests unfortunately

Checks: >
  *,
  -altera-id-dependent-backward-branch,
  -altera-struct-pack-align,
  -altera-unroll-loops,
  -bugprone-easily-swappable-parameters,
  -cert-dcl16-c,
  -cert-dcl21-cpp,
  -clang-analyzer-deadcode,
  -clang-diagnostic-error,
  -clang-diagnostic-unused-macros,
  -cppcoreguidelines-macro-usage,
  -cppcoreguidelines-non-private-member-variables-in-classes,
  -cppcoreguidelines-owning-memory,
  -cppcoreguidelines-pro-type-reinterpret-cast,
  -cppcoreguidelines-special-member-functions,
  -fuchsia-default-arguments-calls,
  -fuchsia-default-arguments-declarations,
  -fuchsia-overloaded-operator,
  -fuchsia-trailing-return,
  -google-explicit-constructor,
  -google-readability-avoid-underscore-in-googletest-name,
  -google-readability-braces-around-statements,
  -hicpp-braces-around-statements,readability-braces-around-statements,
  -hicpp-deprecated-headers,
  -hicpp-explicit-conversions,
  -hicpp-named-parameter,
  -hicpp-special-member-functions,
  -hicpp-uppercase-literal-suffix,
  -llvmlibc-callee-namespace,
  -llvmlibc-implementation-in-namespace,
  -llvm-include-order,
  -llvmlibc-restrict-system-libc-headers,
  -llvm-header-guard,
  -misc-non-private-member-variables-in-classes,
  -modernize-deprecated-headers,
  -modernize-use-trailing-return-type,
  -readability-braces-around-statements,
  -readability-identifier-length,
  readability-identifier-naming,
  -readability-implicit-bool-conversion,
  -readability-function-cognitive-complexity,
  -readability-uppercase-literal-suffix

WarningsAsErrors: "*"

CheckOptions:
  - { key: readability-identifier-naming.AggressiveDependentMemberLookup, value: true }
  - { key: readability-identifier-naming.ClassCase,                       value: CamelCase }
  - { key: readability-identifier-naming.EnumCase,                        value: CamelCase }
  - { key: readability-identifier-naming.EnumConstantCase,                value: lower_case }
  - { key: readability-identifier-naming.FunctionCase,                    value: lower_case }
  - { key: readability-identifier-naming.LocalVariableCase,               value: lower_case }
  - { key: readability-identifier-naming.MacroDefinitionCase,             value: UPPER_CASE }
  - { key: readability-identifier-naming.MemberCase,                      value: lower_case }
  - { key: readability-identifier-naming.MethodCase,                      value: lower_case }
  - { key: readability-identifier-naming.NamespaceCase,                   value: lower_case }
  - { key: readability-identifier-naming.ParameterCase,                   value: lower_case }
  - { key: readability-identifier-naming.PrivateMemberCase,               value: lower_case }
  - { key: readability-identifier-naming.PrivateMemberSuffix,             value: _ }
  - { key: readability-identifier-naming.ProtectedMemberCase,             value: lower_case }
  - { key: readability-identifier-naming.ProtectedMemberSuffix,           value: _ }
  - { key: readability-identifier-naming.StructCase,                      value: CamelCase }
  - { key: readability-identifier-naming.TypeAliasCase,                   value: CamelCase }
  - { key: readability-identifier-naming.TypedefCase,                     value: CamelCase }
  - { key: readability-identifier-naming.TypeTemplateParameterCase,       value: CamelCase }
  - { key: readability-identifier-naming.UnionCase,                       value: CamelCase }
  - { key: readability-identifier-naming.ValueTemplateParameterCase,      value: lower_case }
  - { key: readability-identifier-naming.VariableCase,                    value: lower_case }

HeaderFilterRegex: '^.*(?:_deps).*'
# dangerous as this looks into 3rd party headers as well, but you might get better results (just use it occasionally)
#HeaderFilterRegex: '.*'
